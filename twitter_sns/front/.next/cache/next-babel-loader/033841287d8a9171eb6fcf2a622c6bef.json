{"ast":null,"code":"import { all, fork, call, take, put } from 'redux-saga/effects';\nimport axios from 'axios'; // 요청을 보내고\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n} // 요청의 결과를 받는다\n\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      tpye: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      tpye: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI() {\n  return axios.post('/api/post');\n}\n\nfunction* addPost() {\n  try {\n    const result = yield call(addPostAPI);\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      tpye: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n} // take는 괄호안의 액션이 실행될 때 까지 기다리겠다는 뜻\n\n\nfunction* watchLogin() {\n  yield take('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield take('LOG_OUT_REQUEST', logOut);\n}\n\nfunction* watchAddPost() {\n  yield take('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["/home/useong/깃 레퍼지토리/Mini-Project/twitter_sns/front/sagas/index.js"],"names":["all","fork","call","take","put","axios","logInAPI","data","post","logIn","action","result","type","err","tpye","response","logOutAPI","logOut","addPostAPI","addPost","watchLogin","watchLogOut","watchAddPost","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH,C,CAED;;;AACA,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMT,IAAI,CAACI,QAAD,EAAWI,MAAM,CAACH,IAAlB,CAAzB;AACA,UAAMH,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,gBADA;AAENL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOM,GAAP,EAAY;AACV,UAAMT,GAAG,CAAC;AACNU,MAAAA,IAAI,EAAE,gBADA;AAENP,MAAAA,IAAI,EAAEM,GAAG,CAACE,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASS,SAAT,GAAqB;AACjB,SAAOX,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUS,MAAV,GAAmB;AACf,MAAI;AACA,UAAMN,MAAM,GAAG,MAAMT,IAAI,CAACc,SAAD,CAAzB;AACA,UAAMZ,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,iBADA;AAENL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOM,GAAP,EAAY;AACV,UAAMT,GAAG,CAAC;AACNU,MAAAA,IAAI,EAAE,iBADA;AAENP,MAAAA,IAAI,EAAEM,GAAG,CAACE,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASW,UAAT,GAAsB;AAClB,SAAOb,KAAK,CAACG,IAAN,CAAW,WAAX,CAAP;AACH;;AAED,UAAUW,OAAV,GAAoB;AAChB,MAAI;AACA,UAAMR,MAAM,GAAG,MAAMT,IAAI,CAACgB,UAAD,CAAzB;AACA,UAAMd,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,kBADA;AAENL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOM,GAAP,EAAY;AACV,UAAMT,GAAG,CAAC;AACNU,MAAAA,IAAI,EAAE,kBADA;AAENP,MAAAA,IAAI,EAAEM,GAAG,CAACE,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAIH;AACJ,C,CAED;;;AACA,UAAUa,UAAV,GAAuB;AACnB,QAAMjB,IAAI,CAAC,gBAAD,EAAmBM,KAAnB,CAAV;AACH;;AAED,UAAUY,WAAV,GAAwB;AACpB,QAAMlB,IAAI,CAAC,iBAAD,EAAoBc,MAApB,CAAV;AACH;;AAED,UAAUK,YAAV,GAAyB;AACrB,QAAMnB,IAAI,CAAC,kBAAD,EAAqBgB,OAArB,CAAV;AACH;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAMvB,GAAG,CAAC,CACNC,IAAI,CAACmB,UAAD,CADE,EAENnB,IAAI,CAACoB,WAAD,CAFE,EAGNpB,IAAI,CAACqB,YAAD,CAHE,CAAD,CAAT;AAMH","sourcesContent":["import { all, fork, call, take, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// 요청을 보내고\nfunction logInAPI(data) {\n    return axios.post('/api/login', data)\n}\n\n// 요청의 결과를 받는다\nfunction* logIn(action) {\n    try {\n        const result = yield call(logInAPI, action.data)\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n        });\n    } catch (err) {\n        yield put({\n            tpye: 'LOG_IN_FAILURE',\n            data: err.response.data,\n        })\n    }\n}\n\nfunction logOutAPI() {\n    return axios.post('/api/logout')\n}\n\nfunction* logOut() {\n    try {\n        const result = yield call(logOutAPI)\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n            data: result.data\n        });\n    } catch (err) {\n        yield put({\n            tpye: 'LOG_OUT_FAILURE',\n            data: err.response.data,\n        })\n    }\n}\n\nfunction addPostAPI() {\n    return axios.post('/api/post')\n}\n\nfunction* addPost() {\n    try {\n        const result = yield call(addPostAPI)\n        yield put({\n            type: 'ADD_POST_SUCCESS',\n            data: result.data\n        });\n    } catch (err) {\n        yield put({\n            tpye: 'ADD_POST_FAILURE',\n            data: err.response.data,\n        })\n    }\n}\n\n// take는 괄호안의 액션이 실행될 때 까지 기다리겠다는 뜻\nfunction* watchLogin() {\n    yield take('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n    yield take('LOG_OUT_REQUEST', logOut);\n}\n\nfunction* watchAddPost() {\n    yield take('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogOut),\n        fork(watchAddPost),\n    ])\n\n}"]},"metadata":{},"sourceType":"module"}