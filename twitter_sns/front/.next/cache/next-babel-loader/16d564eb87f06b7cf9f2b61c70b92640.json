{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga'; // rootReducer 불러오기\n\nimport reducer from '../reducers';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getSate\n}) => next => action => {\n  console.log(action);\n  return next(action);\n};\n\nconst configureStore = () => {\n  // 빈 배열에는 싸가나 썽크가 들어간다.\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares)); // store는 state랑 reducer를 포함한 것\n\n  const store = createStore(reducer, enhancer); // store.dispatch({\n  //     type: 'CHANGE_NICKNAME',\n  //     data: 'boogieLee',\n  // })\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/home/useong/깃 레퍼지토리/Mini-Project/twitter_sns/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","createStore","compose","composeWithDevTools","createSagaMiddleware","reducer","loggerMiddleware","dispatch","getSate","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","rootSaga","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA4BC,IAAD,IAAWC,MAAD,IAAY;AACtEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACH,CAHD;;AAKA,MAAMG,cAAc,GAAG,MAAM;AACzB;AACA,QAAMC,cAAc,GAAGV,oBAAoB,EAA3C;AACA,QAAMW,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB;AACA,QAAMU,QAAQ,GAAG,QACXd,OAAO,CAACF,eAAe,CAAC,GAAGe,WAAJ,CAAhB,CADI,GAEXZ,mBAAmB,CAACH,eAAe,CAAC,GAAGe,WAAJ,CAAhB,CAFzB,CAJyB,CAOzB;;AAEA,QAAME,KAAK,GAAGhB,WAAW,CAACI,OAAD,EAAUW,QAAV,CAAzB,CATyB,CAUzB;AACA;AACA;AACA;;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBC,QAAnB,CAAjB;AACA,SAAOH,KAAP;AACH,CAhBD;;AAkBA,MAAMI,OAAO,GAAGtB,aAAa,CAACc,cAAD,EAAiB;AAC1CS,EAAAA,KAAK;AADqC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\n// rootReducer 불러오기\nimport reducer from '../reducers'\n\nconst loggerMiddleware = ({ dispatch, getSate }) => (next) => (action) => {\n    console.log(action);\n    return next(action);\n}\n\nconst configureStore = () => {\n    // 빈 배열에는 싸가나 썽크가 들어간다.\n    const sagaMiddleware = createSagaMiddleware();\n    const middlewares = [sagaMiddleware, loggerMiddleware];\n    const enhancer = process.env.NODE_ENV === 'production'\n        ? compose(applyMiddleware(...middlewares))\n        : composeWithDevTools(applyMiddleware(...middlewares))\n    // store는 state랑 reducer를 포함한 것\n    \n    const store = createStore(reducer, enhancer);\n    // store.dispatch({\n    //     type: 'CHANGE_NICKNAME',\n    //     data: 'boogieLee',\n    // })\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n    debug: process.env.NODE_ENV === 'development',\n});\n\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}