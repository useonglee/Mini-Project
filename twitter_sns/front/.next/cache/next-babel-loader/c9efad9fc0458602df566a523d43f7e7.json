{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, call, take, put } from 'redux-saga/effects';\nimport axios from 'axios'; // 요청을 보내고\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n} // 요청의 결과를 받는다\n\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(logInAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            tpye: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  var result;\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: 'LOG_OUT_SUCCESS',\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            tpye: 'LOG_OUT_FAILURE',\n            data: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction addPostAPI() {\n  return axios.post('/api/post');\n}\n\nfunction addPost() {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addPostAPI);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: 'ADD_POST_SUCCESS',\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            tpye: 'ADD_POST_FAILURE',\n            data: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n} // take는 괄호안의 액션이 실행될 때 까지 기다리겠다는 뜻\n\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return take('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return take('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return take('ADD_POST_REQUEST', addPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogin), fork(watchLogOut), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/home/useong/깃 레퍼지토리/Mini-Project/twitter_sns/front/sagas/index.js"],"names":["logIn","logOut","addPost","watchLogin","watchLogOut","watchAddPost","rootSaga","all","fork","call","take","put","axios","logInAPI","data","post","action","result","type","tpye","response","logOutAPI","addPostAPI"],"mappings":"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","sourcesContent":["import { all, fork, call, take, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// 요청을 보내고\nfunction logInAPI(data) {\n    return axios.post('/api/login', data)\n}\n\n// 요청의 결과를 받는다\nfunction* logIn(action) {\n    try {\n        const result = yield call(logInAPI, action.data)\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n        });\n    } catch (err) {\n        yield put({\n            tpye: 'LOG_IN_FAILURE',\n            data: err.response.data,\n        })\n    }\n}\n\nfunction logOutAPI() {\n    return axios.post('/api/logout')\n}\n\nfunction* logOut() {\n    try {\n        const result = yield call(logOutAPI)\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n            data: result.data\n        });\n    } catch (err) {\n        yield put({\n            tpye: 'LOG_OUT_FAILURE',\n            data: err.response.data,\n        })\n    }\n}\n\nfunction addPostAPI() {\n    return axios.post('/api/post')\n}\n\nfunction* addPost() {\n    try {\n        const result = yield call(addPostAPI)\n        yield put({\n            type: 'ADD_POST_SUCCESS',\n            data: result.data\n        });\n    } catch (err) {\n        yield put({\n            tpye: 'ADD_POST_FAILURE',\n            data: err.response.data,\n        })\n    }\n}\n\n// take는 괄호안의 액션이 실행될 때 까지 기다리겠다는 뜻\nfunction* watchLogin() {\n    yield take('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n    yield take('LOG_OUT_REQUEST', logOut);\n}\n\nfunction* watchAddPost() {\n    yield take('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogOut),\n        fork(watchAddPost),\n    ])\n\n}"]},"metadata":{},"sourceType":"module"}