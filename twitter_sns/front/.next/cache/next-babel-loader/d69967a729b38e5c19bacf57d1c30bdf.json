{"ast":null,"code":"var _jsxFileName = \"/home/useong/\\uAE43 \\uB808\\uD37C\\uC9C0\\uD1A0\\uB9AC/Mini-Project/twitter_sns/front/components/PostCard.js\";\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { Card, Popover, Button, Avatar, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm'; // 컴포넌트를 작성하기 전에는 기획을 먼저 한다.\n// page/index.js 에서 반복문 돌려서 post를 부모로 부터 받아온다.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PostCard({\n  post\n}) {\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const onToggleLike = useCallback(() => {\n    // true는 false로, false는 true로 바꿔준다.\n    setLiked(prev => !prev);\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); // 아이디가 있을 경우, ?는 옵셔널 체이닝 연산자(있나 없나 의심부분 확인)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card // 이미지가 있다면\n    , {\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 42\n      }, this),\n      actions: [\n      /*#__PURE__*/\n      // 배열안에 JXS는 key를 붙여준다.\n      _jsxDEV(RetweetOutlined, {}, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onToggleLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onToggleLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 27\n      }, this),\n      /*#__PURE__*/\n      // 댓글 버튼\n      _jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this),\n      /*#__PURE__*/\n      // 더 보기 버튼                    \n      _jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 29\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this)\n      }, \"more\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this)],\n      children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: post.User.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }, this),\n        title: post.User.nickname,\n        description: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), commentFormOpened && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        header: `${post.Comments.length}개의 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n              children: item.User.nickname[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 45\n            }, this),\n            content: item.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n\n;\nPostCard.PropTypes = {\n  // shape 대신 object를 써 줄 수도있지만 더 자세히 쓰기위해 shape을 쓴다.\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createAt: PropTypes.object,\n    // arrayOf는 객체들의 배열이라는 뜻이다.\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/home/useong/깃 레퍼지토리/Mini-Project/twitter_sns/front/components/PostCard.js"],"names":["React","useState","useCallback","PropTypes","useSelector","Card","Popover","Button","Avatar","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","PostImages","CommentForm","PostCard","post","liked","setLiked","commentFormOpened","setCommentFormOpened","onToggleLike","prev","onToggleComment","id","state","user","me","marginBottom","Images","User","nickname","content","Comments","length","item","shape","number","object","string","createAt","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { Card, Popover, Button, Avatar, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\n\n// 컴포넌트를 작성하기 전에는 기획을 먼저 한다.\n// page/index.js 에서 반복문 돌려서 post를 부모로 부터 받아온다.\nfunction PostCard({ post }) {\n    const [liked, setLiked] = useState(false);\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\n    const onToggleLike = useCallback(() => {\n        // true는 false로, false는 true로 바꿔준다.\n        setLiked((prev) => !prev);\n    }, []);\n    const onToggleComment = useCallback(() => {\n        setCommentFormOpened((prev) => !prev);\n    }, []);\n    const id = useSelector((state) => state.user.me?.id);\n    // 아이디가 있을 경우, ?는 옵셔널 체이닝 연산자(있나 없나 의심부분 확인)\n    \n    return (\n        <div style={{ marginBottom: 20 }}>\n            <Card\n                // 이미지가 있다면\n                cover={post.Images[0] && <PostImages images={post.Images} />}\n                actions={[\n                    // 배열안에 JXS는 key를 붙여준다.\n                    <RetweetOutlined key=\"retweet\" />,\n                    liked\n                        ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike} />\n                        : <HeartOutlined key=\"heart\" onClick={onToggleLike} />, \n                    \n                    // 댓글 버튼\n                    <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n                    // 더 보기 버튼                    \n                    <Popover key=\"more\" content={(\n                            <Button.Group>\n                                {/* 내 아이디랑 게시글 작성자 아이디가 나랑 같으면 */}\n                                {id && post.User.id === id ? (\n                                    <>\n                                    <Button>수정</Button>\n                                    {/* danger는 빨강색 */}\n                                    <Button type=\"danger\">삭제</Button>\n                                    </>\n                                ) : <Button>신고</Button>}                                    \n                                </Button.Group>\n                        )}>\n                        <EllipsisOutlined />\n                    </Popover>,\n                ]}\n            >\n                <Card.Meta\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n                    title={post.User.nickname}\n                    description={post.content}\n                />\n            </Card>\n            {commentFormOpened && (\n                <div>\n                    {/* 게시글의 아이디를 커멘트 폼이 받아야 한다 */}\n                    <CommentForm post={post}/>\n                    <List \n                        header={`${post.Comments.length}개의 댓글`}\n                        itemLayout=\"horizontal\"\n                        dataSource={post.Comments}\n                        renderItem={(item) => (\n                            <li>\n                                <Comment\n                                    author={item.User.nickname}\n                                    avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n                                    content={item.content}\n                                />\n                            </li>\n                        )}\n                    />\n                </div>)}\n            {/* <CommentForm />\n            <Comments /> */}\n        </div>\n    );\n};\n\nPostCard.PropTypes = {\n    // shape 대신 object를 써 줄 수도있지만 더 자세히 쓰기위해 shape을 쓴다.\n    post: PropTypes.shape({\n        id:PropTypes.number,\n        User: PropTypes.object,\n        content: PropTypes.string,\n        createAt: PropTypes.object,\n        // arrayOf는 객체들의 배열이라는 뜻이다.\n        Comments: PropTypes.arrayOf(PropTypes.object),\n        Images: PropTypes.arrayOf(PropTypes.object),\n    }).isRequired,\n};\n\nexport default PostCard\n"]},"metadata":{},"sourceType":"module"}