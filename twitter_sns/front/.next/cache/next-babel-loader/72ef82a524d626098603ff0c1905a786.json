{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// action\nimport { HYDRATE } from 'next-redux-wrapper'; // user는 user.js 파일의 reducer가 된다.\n\nimport user from './user';\nimport post from './post'; // 중앙 저장소(redux)\n\nvar initialState = {\n  // 초기 앱에 대한 구조를 미리 잡아 놔야 한다.\n  user: {},\n  post: {}\n}; // reducer는 (이전 상태, 액션을 통해서) => 다음 상태를 만든다.\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n    // 아래 코드를 쓰지 않으면 user가 정의되지 않았다고 에러가 뜬다.\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/home/useong/NodeBird_SNS/front/reducers/index.js"],"names":["HYDRATE","user","post","initialState","rootReducer","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA;AACA,SAASA,OAAT,QAAwB,oBAAxB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;;AACA,IAAMC,YAAY,GAAG;AACjB;AACAF,EAAAA,IAAI,EAAE,EAFW;AAKjBC,EAAAA,IAAI,EAAE;AALW,CAArB,C,CASA;;AACA,IAAME,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,OAAL;AACIQ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,6CAAWD,KAAX,GAAqBC,MAAM,CAACI,OAA5B;AAEJ;;AACA;AACI,aAAOL,KAAP;AAPR;AASH,CAVD;;AAYA,eAAeD,WAAf","sourcesContent":["// action\nimport { HYDRATE } from 'next-redux-wrapper';\n\n// user는 user.js 파일의 reducer가 된다.\nimport user from './user';\nimport post from './post';\n\n// 중앙 저장소(redux)\nconst initialState = {\n    // 초기 앱에 대한 구조를 미리 잡아 놔야 한다.\n    user: {\n\n    },\n    post: {\n    },\n};\n\n// reducer는 (이전 상태, 액션을 통해서) => 다음 상태를 만든다.\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case HYDRATE:\n            console.log('HYDRATE', action);\n            return {...state, ...action.payload};\n        \n        // 아래 코드를 쓰지 않으면 user가 정의되지 않았다고 에러가 뜬다.\n        default:\n            return state;    \n    }\n};\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}