{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  // 사용자가 로그인 했는지 안했는지의 여부\n  isLoggedIn: false,\n  user: null,\n  signUpData: {},\n  loginData: {}\n};\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n}; // 로그아웃 할 때는 data가 필요없다.\n\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT'\n  };\n}; // 이전 스테이트와 액션을 받아서 다음 스테이트를 돌려주는 함수\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"LOG_IN\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggedIn: true,\n        user: action.data\n      });\n\n    case \"LOG_OUT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggedIn: false,\n        user: null\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/useong/NodeBird_SNS/front/reducers/user.js"],"names":["initialState","isLoggedIn","user","signUpData","loginData","loginAction","data","type","logoutAction","reducer","state","action"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AACxB;AACAC,EAAAA,UAAU,EAAE,KAFY;AAGxBC,EAAAA,IAAI,EAAE,IAHkB;AAIxBC,EAAAA,UAAU,EAAE,EAJY;AAKxBC,EAAAA,SAAS,EAAE;AALa,CAArB;AAQP,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAE,QADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALM,C,CAMP;;AACA,OAAO,MAAME,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHD,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM,C,CAMP;;AACA,MAAME,OAAO,GAAG,CAACC,KAAK,GAAGV,YAAT,EAAuBW,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAK,QAAL;AACI,6CACOG,KADP;AAEIT,QAAAA,UAAU,EAAE,IAFhB;AAGIC,QAAAA,IAAI,EAAES,MAAM,CAACL;AAHjB;;AAKJ,SAAK,SAAL;AACI,6CACOI,KADP;AAEIT,QAAAA,UAAU,EAAE,KAFhB;AAGIC,QAAAA,IAAI,EAAE;AAHV;;AAKJ;AACA,aAAOQ,KAAP;AAdJ;AAgBH,CAjBD;;AAmBA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n    // 사용자가 로그인 했는지 안했는지의 여부\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {},\n}\n\nexport const loginAction = (data) => {\n    return { \n        type: 'LOG_IN',\n        data,\n    }\n}\n// 로그아웃 할 때는 data가 필요없다.\nexport const logoutAction = () => {\n    return { \n        type: 'LOG_OUT',\n    }\n}\n\n// 이전 스테이트와 액션을 받아서 다음 스테이트를 돌려주는 함수\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"LOG_IN\":\n            return {                \n                ...state,\n                isLoggedIn: true,\n                user: action.data,\n            };\n        case \"LOG_OUT\":\n            return {                \n                ...state,\n                isLoggedIn: false,\n                user: null,\n            };\n        default: \n        return state;\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}