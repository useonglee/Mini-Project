{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    // 다른 정보들과 합쳐주는 것은 대문자로 시작한다.\n    User: {\n      id: 1,\n      nickname: '하이우성'\n    },\n    content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n    Images: [{\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '잘나왔어요~~!!'\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '우아!!'\n    }]\n  }],\n  // 이미지 업로드할 때 여기에 저장\n  imagePaths: [],\n  // 게시글 추가 완료 되었을 때, true로 변환\n  postAdded: false\n}; // 액션 이름을 상수로 빼준다 => const 값 재활용 가능\n\nvar ADD_POST = 'ADD_POST';\nexport var addPost = {\n  type: ADD_POST\n}; // 더미데이터\n\nvar dummyPost = {\n  id: 2,\n  content: '더미데이터입니다.',\n  User: {\n    id: 1,\n    nickname: '하이우성'\n  },\n  Image: [],\n  Comments: []\n}; // 이전 스테이트와 액션을 받아서 다음 스테이트를 돌려주는 함수\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // 게시글 쓰자마자 바로 위에 올라가게 해준다.\n        mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        postAdded: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/useong/깃 레퍼지토리/Mini-Project/twitter_sns/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","postAdded","ADD_POST","addPost","type","dummyPost","Image","reducer","state","action"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,CAAC;AACRC,IAAAA,EAAE,EAAE,CADI;AAER;AACAC,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR,KAHE;AAORC,IAAAA,OAAO,EAAE,uBAPD;AAQRC,IAAAA,MAAM,EAAE,CAAC;AACLC,MAAAA,GAAG,EAAE;AADA,KAAD,EAEL;AACCA,MAAAA,GAAG,EAAE;AADN,KAFK,EAIN;AACEA,MAAAA,GAAG,EAAE;AADP,KAJM,CARA;AAeRC,IAAAA,QAAQ,EAAE,CAAC;AACPL,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADC;AAIPC,MAAAA,OAAO,EAAE;AAJF,KAAD,EAKP;AACCF,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADP;AAICC,MAAAA,OAAO,EAAE;AAJV,KALO;AAfF,GAAD,CADa;AA4BxB;AACAI,EAAAA,UAAU,EAAE,EA7BY;AA8BxB;AACAC,EAAAA,SAAS,EAAE;AA/Ba,CAArB,C,CAkCP;;AACA,IAAMC,QAAQ,GAAE,UAAhB;AACA,OAAO,IAAMC,OAAO,GAAG;AACnBC,EAAAA,IAAI,EAAEF;AADa,CAAhB,C,CAGP;;AACA,IAAMG,SAAS,GAAG;AACdZ,EAAAA,EAAE,EAAE,CADU;AAEdG,EAAAA,OAAO,EAAE,WAFK;AAGdF,EAAAA,IAAI,EAAE;AACFD,IAAAA,EAAE,EAAE,CADF;AAEFE,IAAAA,QAAQ,EAAE;AAFR,GAHQ;AAOdW,EAAAA,KAAK,EAAE,EAPO;AAQdP,EAAAA,QAAQ,EAAE;AARI,CAAlB,C,CAWA;;AACA,IAAMQ,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBjB,YAAyB;AAAA,MAAXkB,MAAW;;AAC9C,UAAQA,MAAM,CAACL,IAAf;AACI,SAAKF,QAAL;AACI,6CACOM,KADP;AAEI;AACAhB,QAAAA,SAAS,GAAGa,SAAH,4BAAiBG,KAAK,CAAChB,SAAvB,EAHb;AAIIS,QAAAA,SAAS,EAAE;AAJf;;AAMJ;AACI,aAAOO,KAAP;AATR;AAWH,CAZD;;AAcA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n    mainPosts: [{\n        id: 1,\n        // 다른 정보들과 합쳐주는 것은 대문자로 시작한다.\n        User: {\n            id: 1,\n            nickname: '하이우성',\n        },\n        content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n        Images: [{\n            src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\n        }, {\n            src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\n        },{\n            src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\n        }], \n        Comments: [{\n            User: {\n                nickname: 'nero',\n            },\n            content: '잘나왔어요~~!!',\n        }, {\n            User: {\n                nickname: 'hero',\n            },\n            content: '우아!!'\n        }]\n    }],\n    // 이미지 업로드할 때 여기에 저장\n    imagePaths: [],\n    // 게시글 추가 완료 되었을 때, true로 변환\n    postAdded: false,\n}\n\n// 액션 이름을 상수로 빼준다 => const 값 재활용 가능\nconst ADD_POST ='ADD_POST';\nexport const addPost = {\n    type: ADD_POST,\n}\n// 더미데이터\nconst dummyPost = {\n    id: 2,\n    content: '더미데이터입니다.', \n    User: {\n        id: 1,\n        nickname: '하이우성',\n    },\n    Image: [],\n    Comments: [],\n};\n\n// 이전 스테이트와 액션을 받아서 다음 스테이트를 돌려주는 함수\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_POST:\n            return {\n                ...state,\n                // 게시글 쓰자마자 바로 위에 올라가게 해준다.\n                mainPosts: [dummyPost, ...state.mainPosts],\n                postAdded: true,\n            };\n        default: \n            return state;\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}