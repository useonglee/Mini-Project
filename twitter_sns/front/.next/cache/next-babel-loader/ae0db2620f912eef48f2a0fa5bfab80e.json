{"ast":null,"code":"var _jsxFileName = \"/home/useong/NodeBird_SNS/front/components/PostCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { Card, Popover, Button, Avatar } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport PostImages from './PostImages'; // 컴포넌트를 작성하기 전에는 기획을 먼저 한다.\n// page/index.js 에서 반복문 돌려서 post를 부모로 부터 받아온다.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      liked = _useState[0],\n      setLiked = _useState[1];\n\n  var _useState2 = useState(false),\n      commentFormOpened = _useState2[0],\n      setCommentFormOpened = _useState2[1];\n\n  var onToggleLike = useCallback(function () {}, []);\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); // 아이디가 있을 경우, ?는 옵셔널 체이닝 연산자(있나 없나 의심부분 확인)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    children: /*#__PURE__*/_jsxDEV(Card // 이미지가 있다면\n    , {\n      cover: post.Image[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 41\n      }, this),\n      actions: [\n      /*#__PURE__*/\n      // 배열안에 JXS는 key를 붙여준다.\n      _jsxDEV(RetweetOutlined, {}, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }, this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onToggleLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onToggleLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 27\n      }, this),\n      /*#__PURE__*/\n      // 댓글 버튼\n      _jsxDEV(MessageOutlined, {}, \"comment\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this),\n      /*#__PURE__*/\n      // 더 보기 버튼                    \n      _jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 29\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this)\n      }, \"more\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this)],\n      children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: post.User.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }, this),\n        title: post.User.nickname,\n        description: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PostCard, \"1l0ziKQMsTZwlnrMLAAma6sIK94=\", false, function () {\n  return [useSelector];\n});\n\n_c = PostCard;\n;\nPostCard.PropTypes = {\n  // shape 대신 object를 써 줄 수도있지만 더 자세히 쓰기위해 shape을 쓴다.\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createAt: PropTypes.object,\n    // arrayOf는 객체들의 배열이라는 뜻이다.\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["/home/useong/NodeBird_SNS/front/components/PostCard.js"],"names":["React","useState","useCallback","PropTypes","useSelector","Card","Popover","Button","Avatar","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","PostImages","PostCard","post","liked","setLiked","commentFormOpened","setCommentFormOpened","onToggleLike","id","state","user","me","marginBottom","Image","Images","User","nickname","content","shape","number","object","string","createAt","Comments","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { Card, Popover, Button, Avatar } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport PostImages from './PostImages';\n\n// 컴포넌트를 작성하기 전에는 기획을 먼저 한다.\n// page/index.js 에서 반복문 돌려서 post를 부모로 부터 받아온다.\nfunction PostCard({ post }) {\n    const [liked, setLiked] = useState(false);\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\n    const onToggleLike = useCallback(() => {\n\n    }, []);\n    const id = useSelector((state) => state.user.me?.id);\n    // 아이디가 있을 경우, ?는 옵셔널 체이닝 연산자(있나 없나 의심부분 확인)\n    \n    return (\n        <div style={{ marginBottom: 20 }}>\n            <Card\n                // 이미지가 있다면\n                cover={post.Image[0] && <PostImages images={post.Images} />}\n                actions={[\n                    // 배열안에 JXS는 key를 붙여준다.\n                    <RetweetOutlined key=\"retweet\" />,\n                    liked\n                        ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike} />\n                        : <HeartOutlined key=\"heart\" onClick={onToggleLike} />,    \n                    \n                    // 댓글 버튼\n                    <MessageOutlined key=\"comment\" />,\n                    // 더 보기 버튼                    \n                    <Popover key=\"more\" content={(\n                            <Button.Group>\n                                {/* 내 아이디랑 게시글 작성자 아이디가 나랑 같으면 */}\n                                {id && post.User.id === id ? (\n                                    <>\n                                    <Button>수정</Button>\n                                    {/* danger는 빨강색 */}\n                                    <Button type=\"danger\">삭제</Button>\n                                    </>\n                                ) : <Button>신고</Button>}                                    \n                                </Button.Group>\n                        )}>\n                        <EllipsisOutlined />\n                    </Popover>,\n                ]}\n            >\n                <Card.Meta\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n                    title={post.User.nickname}\n                    description={post.content}\n                />\n            </Card>\n            {/* <CommentForm />\n            <Comments /> */}\n        </div>\n    );\n};\n\nPostCard.PropTypes = {\n    // shape 대신 object를 써 줄 수도있지만 더 자세히 쓰기위해 shape을 쓴다.\n    post: PropTypes.shape({\n        id:PropTypes.number,\n        User: PropTypes.object,\n        content: PropTypes.string,\n        createAt: PropTypes.object,\n        // arrayOf는 객체들의 배열이라는 뜻이다.\n        Comments: PropTypes.arrayOf(PropTypes.object),\n        Images: PropTypes.arrayOf(PropTypes.object),\n    }).isRequired,\n};\n\nexport default PostCard\n"]},"metadata":{},"sourceType":"module"}