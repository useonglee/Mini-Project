{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// action\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux'; // user는 user.js 파일의 reducer가 된다.\n\nimport user from './user';\nimport post from './post'; // 중앙 저장소(redux)\n// 초기 앱에 대한 구조를 미리 잡아 놔야 한다.\n// reducer는 (이전 상태, 액션을 통해서) => 다음 상태를 만든다.\n// 함수들을 합쳐주는 combine함수를 사용한다.\n\nconst rootReducer = combineReducers({\n  // 서버사이드 렌더링을 위해 index 추가\n  // user리듀서와 post 리듀서를 합쳐준다. (하이드레이트를 위해서 index 리듀서 추가)\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n      // 아래 코드를 쓰지 않으면 user가 정의되지 않았다고 에러가 뜬다.\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/useong/깃 레퍼지토리/Mini-Project/twitter_sns/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA;AACA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;AACA;AAEA;AACA;;AACA,MAAMC,WAAW,GAAGH,eAAe,CAAE;AACjC;AACA;AACAI,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC3B,YAAQA,MAAM,CAACC,IAAf;AACI,WAAKR,OAAL;AACIS,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAWD,KAAX,GAAqBC,MAAM,CAACI,OAA5B;AAER;;AACI;AACI,eAAOL,KAAP;AAPR;AASH,GAbgC;AAcjCJ,EAAAA,IAdiC;AAejCC,EAAAA;AAfiC,CAAF,CAAnC;AAkBA,eAAeC,WAAf","sourcesContent":["// action\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\n\n// user는 user.js 파일의 reducer가 된다.\nimport user from './user';\nimport post from './post';\n\n// 중앙 저장소(redux)\n// 초기 앱에 대한 구조를 미리 잡아 놔야 한다.\n\n// reducer는 (이전 상태, 액션을 통해서) => 다음 상태를 만든다.\n// 함수들을 합쳐주는 combine함수를 사용한다.\nconst rootReducer = combineReducers ({\n    // 서버사이드 렌더링을 위해 index 추가\n    // user리듀서와 post 리듀서를 합쳐준다. (하이드레이트를 위해서 index 리듀서 추가)\n    index: (state = {}, action) => {\n        switch (action.type) {\n            case HYDRATE:\n                console.log('HYDRATE', action);\n                return {...state, ...action.payload};\n\n        // 아래 코드를 쓰지 않으면 user가 정의되지 않았다고 에러가 뜬다.\n            default:\n                return state;  \n        }\n    },\n    user,\n    post,\n});\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}